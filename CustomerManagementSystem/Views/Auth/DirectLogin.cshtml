@model CMS.ViewModels.Auth.LoginViewModel
@using CMS.Localization;
@{
    ViewBag.Title = "DirectLogin";
    Layout = "~/Views/Shared/_LoginLayout.cshtml";
}
<!--begin:Aside Content-->
<div class="text-dark-75 text-left">
    <a href="https://netspeed.com.tr/">
        <img src="/Content/assets/media/svg/logos/netspeed.svg" class="max-h-40px" alt="" />
    </a>
    <h3 class="mb-8 mt-10 text-left text-muted font-weight-bold">
        @Common.LoginDescription
    </h3>

    <a href="@Url.Action("Login","Auth")" class="btn btn-block btn-light-primary py-2 px-9 mt-0 font-weight-bold">
        <i class="flaticon2-back"></i>
        @Common.LoginWithRegisteredPasssword
    </a>
    <div>
    </div>
    <div class="login-wrapper">
        <div class="login-signin">
            <br>
            <div class="text-left mb-1 mb-lg-1">
                <label class="font-size-h4 font-weight-bolder text-warning">
                    @Common.QuickLogin
                </label>
                <p class="text-muted font-size-h5 font-weight-bold">@Common.WithPassword</p>
            </div>
            @*@using (Html.BeginForm("DirectLogin", "Auth", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-group py-2 m-0">
                        @Html.EditorFor(m => m.CustomerCode, new { htmlAttributes = new { @class = "form-control h-auto font-size-h5 border-0 px-0 text-dark py-4 px-8 rounded-lg", @placeholder = Common.LoginUsernamePlaceholder, autocomplete = "off" } })
                    </div>
                    <div id="username-valid-container" class="fv-plugins-message-container">
                    </div>
                    <div class="text-center mt-5">
                        <button type="submit" id="submit-form" class="btn btn-block btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-3">
                            @Common.Login
                        </button>
                    </div>
                }*@
            @using (Ajax.BeginForm("DirectLogin", "Auth", new AjaxOptions { HttpMethod = "POST", OnComplete = "DirectLoginResult" }, new { @class = "form text-left" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-group py-2 m-0">
                    @Html.EditorFor(m => m.CustomerCode, new { htmlAttributes = new { @class = "form-control h-auto font-size-h5 border-0 px-0 text-dark py-4 px-8 rounded-lg", @placeholder = Common.LoginUsernamePlaceholder, autocomplete = "off" } })
                </div>
                <div id="username-valid-container" class="fv-plugins-message-container">
                </div>
                <div class="text-center mt-5">
                    <button type="submit" id="submit-form" class="btn btn-block btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-3">
                        @Common.Login
                    </button>
                </div>
            }
        </div>
    </div>
</div>
@section scripts{
    <script>
        function DirectLoginResult(data, status) {
            try {
                var result = data.responseJSON;
                if (result.valid) {
                    var content = '<div data-field="username" data-validator="notEmpty" class="fv-help-block">' + result.valid + '</div>';
                    $('#username-valid-container').html(content);
                }
                else {
                    swal.fire({
                        input: "text",
                        icon: "success",
                        title: "@Common.SetLoginSMSCode",
                        buttonsStyling: false,
                        confirmButtonText: "@Common.Login",
                        showCancelButton: true,
                        cancelButtonText: "@Common.Cancel",
                        customClass: {
                            confirmButton: "btn font-weight-bold btn-light-primary",
                            cancelButton: "btn font-weight-bold btn-light-danger"
                        },
                        inputValidator: (value) => {
                            if (!value) {
                                return '@Common.SetLoginSMSCode'
                            }
                            else {
                                var error = "";
                                //var token = $('input[name="__RequestVerificationToken"]').val();
                                $.ajax({
                                    url: '@Url.Action("CustomerLogin","Auth")',
                                    method: 'POST',
                                    data: { CustomerCode: $('#CustomerCode').val(), SMSPassword: value/* __RequestVerificationToken: token */},
                                    complete: function (data, status) {
                                        if (status == "success") {
                                            var result = data.responseJSON;
                                            if (!result.valid) {
                                                const Toast = swal.mixin({
                                                    toast: true,
                                                    position: 'top-end',
                                                    showConfirmButton: false,
                                                    timer: 1500,
                                                    timerProgressBar: true
                                                })
                                                Toast.fire({
                                                    icon: 'success',
                                                    title: '@Common.LoggingOn'
                                                }).then((result) => {
                                                    $('form').find("button").prop("disabled", "disabled");
                                                    window.location.href = "/";
                                                })
                                            }
                                            else {
                                                swal.fire({
                                                    icon: 'error',
                                                    title: '',
                                                    text: result.valid,
                                                    buttonsStyling: false,
                                                    confirmButtonText: "@Common.OK",
                                                    showCancelButton: false,
                                                    customClass: {
                                                        confirmButton: "btn font-weight-bold btn-light-primary"
                                                    },
                                                })
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    }).then(function () {
                        KTUtil.scrollTop();
                    });
                }
            } catch (e) {
                console.log(e);
            }
        }
    </script>
}